// This is our global style for our tampermonkey script
// It overrides the Xenforo default theme colors
// and may contain some other styles for our script UI

@use 'sass:color';
@use 'sass:map';

// Import pink theme tokens and maps
@use './themes/pink' as pink-theme;

// Import button-blue theme tokens and maps
@use './themes/button-blue' as button-blue-theme;

// Helper function to extract HSL channels from a color
@function get-hsl-channels($color) {
  @return (
    h: color.channel($color, 'hue', $space: hsl),
    s: color.channel($color, 'saturation', $space: hsl),
    l: color.channel($color, 'lightness', $space: hsl),
    a: color.alpha($color)
  );
}

// Mixin to output CSS variables for a theme
@mixin theme-vars($theme) {
  $chrome-bg: get-hsl-channels(map.get($theme, chromeBg));
  --xf-chromeBg--h: #{map.get($chrome-bg, h)};
  --xf-chromeBg--s: #{map.get($chrome-bg, s)};
  --xf-chromeBg--l: #{map.get($chrome-bg, l)};
  --xf-chromeBg--a: #{map.get($chrome-bg, a)};

  $chrome-text: get-hsl-channels(map.get($theme, chromeText));
  --xf-chromeTextColor--h: #{map.get($chrome-text, h)};
  --xf-chromeTextColor--s: #{map.get($chrome-text, s)};
  --xf-chromeTextColor--l: #{map.get($chrome-text, l)};
  --xf-chromeTextColor--a: #{map.get($chrome-text, a)};

  $text: get-hsl-channels(map.get($theme, text));
  --xf-textColor--h: #{map.get($text, h)};
  --xf-textColor--s: #{map.get($text, s)};
  --xf-textColor--l: #{map.get($text, l)};
  --xf-textColor--a: #{map.get($text, a)};

  $link: get-hsl-channels(map.get($theme, link));
  --xf-linkColor--h: #{map.get($link, h)};
  --xf-linkColor--s: #{map.get($link, s)};
  --xf-linkColor--l: #{map.get($link, l)};
  --xf-linkColor--a: #{map.get($link, a)};

  $link-hover: get-hsl-channels(map.get($theme, linkHover));
  --xf-linkHoverColor--h: #{map.get($link-hover, h)};
  --xf-linkHoverColor--s: #{map.get($link-hover, s)};
  --xf-linkHoverColor--l: #{map.get($link-hover, l)};
  --xf-linkHoverColor--a: #{map.get($link-hover, a)};

  $page-bg: get-hsl-channels(map.get($theme, pageBg));
  --xf-pageBg--h: #{map.get($page-bg, h)};
  --xf-pageBg--s: #{map.get($page-bg, s)};
  --xf-pageBg--l: #{map.get($page-bg, l)};
  --xf-pageBg--a: #{map.get($page-bg, a)};

  $content-bg: get-hsl-channels(map.get($theme, contentBg));
  --xf-contentBg--h: #{map.get($content-bg, h)};
  --xf-contentBg--s: #{map.get($content-bg, s)};
  --xf-contentBg--l: #{map.get($content-bg, l)};
  --xf-contentBg--a: #{map.get($content-bg, a)};

  $content-highlight: get-hsl-channels(map.get($theme, contentHighlightBg));
  --xf-contentHighlightBg--h: #{map.get($content-highlight, h)};
  --xf-contentHighlightBg--s: #{map.get($content-highlight, s)};
  --xf-contentHighlightBg--l: #{map.get($content-highlight, l)};
  --xf-contentHighlightBg--a: #{map.get($content-highlight, a)};

  $text-muted: get-hsl-channels(map.get($theme, textMuted));
  --xf-textColorMuted--h: #{map.get($text-muted, h)};
  --xf-textColorMuted--s: #{map.get($text-muted, s)};
  --xf-textColorMuted--l: #{map.get($text-muted, l)};
  --xf-textColorMuted--a: #{map.get($text-muted, a)};

  $text-emphasized: get-hsl-channels(map.get($theme, textEmphasized));
  --xf-textColorEmphasized--h: #{map.get($text-emphasized, h)};
  --xf-textColorEmphasized--s: #{map.get($text-emphasized, s)};
  --xf-textColorEmphasized--l: #{map.get($text-emphasized, l)};
  --xf-textColorEmphasized--a: #{map.get($text-emphasized, a)};

  $text-feature: get-hsl-channels(map.get($theme, textFeature));
  --xf-textColorFeature--h: #{map.get($text-feature, h)};
  --xf-textColorFeature--s: #{map.get($text-feature, s)};
  --xf-textColorFeature--l: #{map.get($text-feature, l)};
  --xf-textColorFeature--a: #{map.get($text-feature, a)};

  $button-bg: get-hsl-channels(map.get($theme, buttonBg));
  --xf-buttonBg--h: #{map.get($button-bg, h)};
  --xf-buttonBg--s: #{map.get($button-bg, s)};
  --xf-buttonBg--l: #{map.get($button-bg, l)};
  --xf-buttonBg--a: #{map.get($button-bg, a)};

  $button-text: get-hsl-channels(map.get($theme, buttonTextColor));
  --xf-buttonTextColor--h: #{map.get($button-text, h)};
  --xf-buttonTextColor--s: #{map.get($button-text, s)};
  --xf-buttonTextColor--l: #{map.get($button-text, l)};
  --xf-buttonTextColor--a: #{map.get($button-text, a)};

  $palette-accent2: get-hsl-channels(map.get($theme, paletteAccent2));
  --xf-paletteAccent2--h: #{map.get($palette-accent2, h)};
  --xf-paletteAccent2--s: #{map.get($palette-accent2, s)};
  --xf-paletteAccent2--l: #{map.get($palette-accent2, l)};
  --xf-paletteAccent2--a: #{map.get($palette-accent2, a)};

  $palette-color3: get-hsl-channels(map.get($theme, paletteColor3));
  --xf-paletteColor3--h: #{map.get($palette-color3, h)};
  --xf-paletteColor3--s: #{map.get($palette-color3, s)};
  --xf-paletteColor3--l: #{map.get($palette-color3, l)};
  --xf-paletteColor3--a: #{map.get($palette-color3, a)};

  $palette-accent1: get-hsl-channels(map.get($theme, paletteAccent1));
  --xf-paletteAccent1--h: #{map.get($palette-accent1, h)};
  --xf-paletteAccent1--s: #{map.get($palette-accent1, s)};
  --xf-paletteAccent1--l: #{map.get($palette-accent1, l)};
  --xf-paletteAccent1--a: #{map.get($palette-accent1, a)};

  $palette-accent3: get-hsl-channels(map.get($theme, paletteAccent3));
  --xf-paletteAccent3--h: #{map.get($palette-accent3, h)};
  --xf-paletteAccent3--s: #{map.get($palette-accent3, s)};
  --xf-paletteAccent3--l: #{map.get($palette-accent3, l)};
  --xf-paletteAccent3--a: #{map.get($palette-accent3, a)};
}

:root {
  --v-animation-speed: 0.3s;
}

html[data-theme='pink-dark'] {
  @include theme-vars(pink-theme.$dark);
}

html[data-theme='pink-light'] {
  @include theme-vars(pink-theme.$light);
}

html[data-theme='button-blue-dark'] {
  @include theme-vars(button-blue-theme.$dark);
}

html[data-theme='button-blue-light'] {
  @include theme-vars(button-blue-theme.$light);
}

// #region Utility classes
.uti {
  &-relative {
    position: relative;
  }

  &-no-pointer {
    pointer-events: none;
  }
  
  &-slide-out {
    transform: translateY(100%);
    opacity: 0;
    transition: transform var(--v-animation-speed) ease,
      opacity var(--v-animation-speed) ease;
  }
  &-slide-in {
    transform: translateY(0);
    opacity: 1;
    transition: transform var(--v-animation-speed) ease,
      opacity var(--v-animation-speed) ease;
  }
}
// #endregion
